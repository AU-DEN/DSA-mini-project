#include <iostream>
#include <string>
#include <queue>
#include <limits>  // To handle cin.ignore() and input limits

using namespace std;

// Customer class to represent each customer
class Customer {
public:
    string name;
    int age;
    string destination;

    // Constructor to initialize a customer
    Customer(string n, int a, string dest) : name(n), age(a), destination(dest) {}

    // Function to display customer details
    void display() {
        cout << "Name: " << name << ", Age: " << age << ", Destination: " << destination << endl;
    }
};

// Function to display the main menu
void displayMenu() {
    cout << "\n==============================\n";
    cout << "Welcome to the Ticket Reservation System\n";
    cout << "==============================\n";
    cout << "1. Add Customer to Queue (Enqueue)\n";
    cout << "2. Process Customer (Dequeue)\n";
    cout << "3. Display All Customers in Queue\n";
    cout << "4. Check if Queue is Empty\n";
    cout << "5. Exit\n";
    cout << "==============================\n";
    cout << "Enter your choice (1-5): ";
}

// Function to clear the input buffer (to handle leftover newline characters)
void clearInputBuffer() {
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// Function to add a customer to the queue
void enqueueCustomer(queue<Customer>& ticketQueue) {
    string name, destination;
    int age;

    cout << "Enter customer name: ";
    getline(cin, name);

    cout << "Enter customer age: ";
    cin >> age;

    clearInputBuffer();  // Clear the buffer to take the next input properly

    cout << "Enter customer destination: ";
    getline(cin, destination);

    Customer customer(name, age, destination);
    ticketQueue.push(customer);

    cout << "Customer added to the queue successfully!\n";
}

// Function to process (dequeue) a customer from the queue
void dequeueCustomer(queue<Customer>& ticketQueue) {
    if (!ticketQueue.empty()) {
        Customer customer = ticketQueue.front();
        ticketQueue.pop();
        cout << "Processing customer:\n";
        customer.display();
        cout << "Customer processed successfully.\n";
    } else {
        cout << "No customers in the queue to process.\n";
    }
}

// Function to display all customers in the queue
void displayQueue(queue<Customer>& ticketQueue) {
    if (!ticketQueue.empty()) {
        cout << "\nCustomers in the queue:\n";
        queue<Customer> tempQueue = ticketQueue;  // Copy to preserve the original queue
        while (!tempQueue.empty()) {
            Customer customer = tempQueue.front();
            customer.display();
            tempQueue.pop();
        }
    } else {
        cout << "No customers in the queue.\n";
    }
}

// Function to check if the queue is empty
void checkQueueEmpty(queue<Customer>& ticketQueue) {
    if (ticketQueue.empty()) {
        cout << "The queue is currently empty.\n";
    } else {
        cout << "There are customers in the queue.\n";
    }
}

int main() {
    queue<Customer> ticketQueue;  // Queue to manage customer reservations

    int choice;

    do {
        // Display the main menu and take user input
        displayMenu();
        cin >> choice;
        clearInputBuffer();  // Clear input buffer after taking integer input

        switch (choice) {
            case 1:
                enqueueCustomer(ticketQueue);
                break;

            case 2:
                dequeueCustomer(ticketQueue);
                break;

            case 3:
                displayQueue(ticketQueue);
                break;

            case 4:
                checkQueueEmpty(ticketQueue);
                break;

            case 5:
                cout << "Thank you for using the Ticket Reservation System. Goodbye!\n";
                break;

            default:
                cout << "Invalid choice, please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
